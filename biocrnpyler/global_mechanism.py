from warnings import warn

from .mechanism import Mechanism
from .chemical_reaction_network import reaction  
#Global mechanisms are a lot like mechanisms. They are called only by mixtures
#  on a list of all species have been generated by components. Global mechanisms are meant
#  to work as universal mechanisms that function on each species or all species of some
#  type or with some attribute. Global mechanisms may only act on one species at a time.
#
#In order to decide which species a global mechanism acts upon, the filter_dict is used.
#       filter_dict[specie.type / specie.attributes] = True / False
#  For each specie, its type or attributes are sent through the filter_dict. If True
#  is returned, the GlobalMechanism will act on the species. If False is returned, the
#  the GlobalMechanism will not be called. If filter_dict[attribute] is different from
#  filter_dict[type], filter_dict[attribute] takes precedent. If multiple filter_dict[attribute]
#  contradict for different attributes, an error is raised.
#
#If the specie's name, type, and attributes are all not in the filter_dict, the GlobalMechanism will
#  be called if default_on == True and not called if default_on == False.
#Note that the above filtering is done automatically. Any parameters needed by the global mechanism must be
#  in the Mixture's parameter dictionary. These methods are assumed to take a sinlge species
#  as input.
#
#An example of a global mechanism is degradation via dilution which is demonstrated in the Tests folder.
#
#GlobalMechanisms should be used cautiously or avoided alltogether - the order in which they are called
# may have to be carefully user defined in the subclasses of Mixture in order to ensure expected behavior.

class GlobalMechanism(Mechanism):
    def __init__(self, name, type = "", filter_dict = {}, default_on = False):
        self.filter_dict = filter_dict
        self.default_on = default_on
        Mechanism.__init__(self, name = name, type = type)

    def update_species_global(self, species_list, parameters):
        fd = self.filter_dict
        print(fd)
        new_species = []
        for s in species_list:
            use_mechanism = None
            for a in s.attributes:
                if a in fd:
                    if use_mechanism != None:
                        raise AttributeError("species "+repr(s)+" has multiple attributes which conflict with global mechanism "+repr(self))
                    elif fd[a] == True: use_mechanism = True
                    else: use_mechanism = False

            if (s.type in fd and use_mechanism == None):
                use_mechanism = fd[s.type]
            else: use_mechanism = self.default_on

            if use_mechanism:
                new_species += self.update_species(s, parameters)

        return new_species

    def update_reactions_global(self, species_list, parameters):
        fd = self.filter_dict
        new_reactions = []
        for s in species_list:
            use_mechanism = None
            for a in s.attributes:
                if a in fd:
                    if use_mechanism != None:
                        raise AttributeError("species " + repr(
                            s) + " has multiple attributes which conflict with global mechanism " + repr(self))
                    elif fd[a] == True:
                        use_mechanism = True
                    else:
                        use_mechanism = False

            if (s.type in fd and use_mechanism == None):
                use_mechanism = fd[s.type]
            else:
                use_mechanism = self.default_on

            if use_mechanism:
                new_reactions += self.update_reactions(s, parameters)

        return new_reactions

    #All global mechanisms must use update_species functions with these inputs
    def update_species(self, s, parameters):
        return []

    #All global mechanisms must use update_reactions functions with these inputs
    def update_reactions(self, s, parameters):
        return []

class Dilution(GlobalMechanism):
    def __init__(self, name = "global_degredation_via_dilution", type = "dilution", filter_dict = {}):
        GlobalMechanism.__init__(self, name = name, type = type, default_on = True, filter_dict = filter_dict)

    def update_reactions(self, s, parameters):
        k_dil = parameters["kdil"]
        rxn = reaction([s], [], k_dil)
        return [rxn]


